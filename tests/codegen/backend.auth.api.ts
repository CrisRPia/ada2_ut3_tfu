/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * service
 * OpenAPI spec version: 1.0
 */
export interface LoginRequest {
  /** @minLength 1 */
  email: string;
  /** @minLength 1 */
  masterPassword: string;
}

export interface PongResponse {
  /** @minLength 1 */
  ping: string;
}

export interface ProblemDetails {
  /** @nullable */
  type?: string | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  [key: string]: unknown;
}

export interface RegisterRequest {
  /** @minLength 1 */
  email: string;
  /** @minLength 8 */
  masterPassword: string;
}

export interface TokenResponse {
  /** @minLength 1 */
  token: string;
}

export type GetPingParams = {
  echoThis?: string;
};

export type postRegisterResponse200 = {
  data: TokenResponse;
  status: 200;
};

export type postRegisterResponse409 = {
  data: ProblemDetails;
  status: 409;
};

export type postRegisterResponseComposite =
  | postRegisterResponse200
  | postRegisterResponse409;

export type postRegisterResponse = postRegisterResponseComposite & {
  headers: Headers;
};

export const getPostRegisterUrl = () => {
  return `http://localhost:8080/api/auth/register`;
};

export const postRegister = async (
  registerRequest: RegisterRequest,
  options?: RequestInit,
): Promise<postRegisterResponse> => {
  const res = await fetch(getPostRegisterUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(registerRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postRegisterResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postRegisterResponse;
};

export type postLoginResponse200 = {
  data: TokenResponse;
  status: 200;
};

export type postLoginResponse401 = {
  data: ProblemDetails;
  status: 401;
};

export type postLoginResponseComposite =
  | postLoginResponse200
  | postLoginResponse401;

export type postLoginResponse = postLoginResponseComposite & {
  headers: Headers;
};

export const getPostLoginUrl = () => {
  return `http://localhost:8080/api/auth/login`;
};

export const postLogin = async (
  loginRequest: LoginRequest,
  options?: RequestInit,
): Promise<postLoginResponse> => {
  const res = await fetch(getPostLoginUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(loginRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postLoginResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postLoginResponse;
};

export type getPingResponse200 = {
  data: PongResponse;
  status: 200;
};

export type getPingResponseComposite = getPingResponse200;

export type getPingResponse = getPingResponseComposite & {
  headers: Headers;
};

export const getGetPingUrl = (params?: GetPingParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8080/api/auth/ping?${stringifiedParams}`
    : `http://localhost:8080/api/auth/ping`;
};

export const getPing = async (
  params?: GetPingParams,
  options?: RequestInit,
): Promise<getPingResponse> => {
  const res = await fetch(getGetPingUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getPingResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getPingResponse;
};
