/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * service
 * OpenAPI spec version: 1.0
 */
export interface AddSongRequest {
  songId: string;
}

export interface CreatePlaylistRequest {
  /** @minLength 1 */
  name: string;
}

export interface PlaylistDto {
  id?: string;
  /** @nullable */
  name: string | null;
  /** @nullable */
  songs?: SongDto[] | null;
}

export interface PongResponse {
  /** @minLength 1 */
  ping: string;
}

export interface ProblemDetails {
  /** @nullable */
  type?: string | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  [key: string]: unknown;
}

export interface SongDto {
  id?: string;
  /** @nullable */
  title: string | null;
  /** @nullable */
  artist: string | null;
}

export type GetPingParams = {
  echoThis?: string;
};

export type getResponse200 = {
  data: PlaylistDto[];
  status: 200;
};

export type getResponse401 = {
  data: ProblemDetails;
  status: 401;
};

export type getResponseComposite = getResponse200 | getResponse401;

export type getResponse = getResponseComposite & {
  headers: Headers;
};

export const getGetUrl = () => {
  return `http://localhost:8080/api/playlists/`;
};

export const get = async (options?: RequestInit): Promise<getResponse> => {
  const res = await fetch(getGetUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getResponse;
};

export type postResponse201 = {
  data: PlaylistDto;
  status: 201;
};

export type postResponse400 = {
  data: ProblemDetails;
  status: 400;
};

export type postResponseComposite = postResponse201 | postResponse400;

export type postResponse = postResponseComposite & {
  headers: Headers;
};

export const getPostUrl = () => {
  return `http://localhost:8080/api/playlists/`;
};

export const post = async (
  createPlaylistRequest: CreatePlaylistRequest,
  options?: RequestInit,
): Promise<postResponse> => {
  const res = await fetch(getPostUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createPlaylistRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as postResponse;
};

export type postPlaylistIdSongsResponse204 = {
  data: void;
  status: 204;
};

export type postPlaylistIdSongsResponse401 = {
  data: ProblemDetails;
  status: 401;
};

export type postPlaylistIdSongsResponseComposite =
  | postPlaylistIdSongsResponse204
  | postPlaylistIdSongsResponse401;

export type postPlaylistIdSongsResponse =
  postPlaylistIdSongsResponseComposite & {
    headers: Headers;
  };

export const getPostPlaylistIdSongsUrl = (playlistId: string) => {
  return `http://localhost:8080/api/playlists/${playlistId}/songs`;
};

export const postPlaylistIdSongs = async (
  playlistId: string,
  addSongRequest: AddSongRequest,
  options?: RequestInit,
): Promise<postPlaylistIdSongsResponse> => {
  const res = await fetch(getPostPlaylistIdSongsUrl(playlistId), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(addSongRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postPlaylistIdSongsResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postPlaylistIdSongsResponse;
};

export type deletePlaylistIdResponse204 = {
  data: void;
  status: 204;
};

export type deletePlaylistIdResponse401 = {
  data: ProblemDetails;
  status: 401;
};

export type deletePlaylistIdResponseComposite =
  | deletePlaylistIdResponse204
  | deletePlaylistIdResponse401;

export type deletePlaylistIdResponse = deletePlaylistIdResponseComposite & {
  headers: Headers;
};

export const getDeletePlaylistIdUrl = (playlistId: string) => {
  return `http://localhost:8080/api/playlists/${playlistId}`;
};

export const deletePlaylistId = async (
  playlistId: string,
  options?: RequestInit,
): Promise<deletePlaylistIdResponse> => {
  const res = await fetch(getDeletePlaylistIdUrl(playlistId), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: deletePlaylistIdResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deletePlaylistIdResponse;
};

export type getPingResponse200 = {
  data: PongResponse;
  status: 200;
};

export type getPingResponseComposite = getPingResponse200;

export type getPingResponse = getPingResponseComposite & {
  headers: Headers;
};

export const getGetPingUrl = (params?: GetPingParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8080/api/playlists/ping?${stringifiedParams}`
    : `http://localhost:8080/api/playlists/ping`;
};

export const getPing = async (
  params?: GetPingParams,
  options?: RequestInit,
): Promise<getPingResponse> => {
  const res = await fetch(getGetPingUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getPingResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getPingResponse;
};
