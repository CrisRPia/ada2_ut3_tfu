/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * service
 * OpenAPI spec version: 1.0
 */
export interface CreateSongRequest {
  /** @minLength 1 */
  title: string;
  /** @minLength 1 */
  artist: string;
}

export interface PongResponse {
  /** @minLength 1 */
  ping: string;
}

export interface ProblemDetails {
  /** @nullable */
  type?: string | null;
  /** @nullable */
  title?: string | null;
  /** @nullable */
  status?: number | null;
  /** @nullable */
  detail?: string | null;
  /** @nullable */
  instance?: string | null;
  [key: string]: unknown;
}

export interface SongDto {
  id?: string;
  /** @nullable */
  title: string | null;
  /** @nullable */
  artist: string | null;
  playCount?: number;
}

export type GetPingParams = {
  echoThis?: string;
};

export type getPingResponse200 = {
  data: PongResponse;
  status: 200;
};

export type getPingResponseComposite = getPingResponse200;

export type getPingResponse = getPingResponseComposite & {
  headers: Headers;
};

export const getGetPingUrl = (params?: GetPingParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `http://localhost:8080/api/songs/ping?${stringifiedParams}`
    : `http://localhost:8080/api/songs/ping`;
};

export const getPing = async (
  params?: GetPingParams,
  options?: RequestInit,
): Promise<getPingResponse> => {
  const res = await fetch(getGetPingUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getPingResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getPingResponse;
};

export type getSongsResponse200 = {
  data: SongDto[];
  status: 200;
};

export type getSongsResponseComposite = getSongsResponse200;

export type getSongsResponse = getSongsResponseComposite & {
  headers: Headers;
};

export const getGetSongsUrl = () => {
  return `http://localhost:8080/api/songs/songs`;
};

export const getSongs = async (
  options?: RequestInit,
): Promise<getSongsResponse> => {
  const res = await fetch(getGetSongsUrl(), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getSongsResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getSongsResponse;
};

export type postSongsResponse201 = {
  data: SongDto;
  status: 201;
};

export type postSongsResponse400 = {
  data: ProblemDetails;
  status: 400;
};

export type postSongsResponseComposite =
  | postSongsResponse201
  | postSongsResponse400;

export type postSongsResponse = postSongsResponseComposite & {
  headers: Headers;
};

export const getPostSongsUrl = () => {
  return `http://localhost:8080/api/songs/songs`;
};

export const postSongs = async (
  createSongRequest: CreateSongRequest,
  options?: RequestInit,
): Promise<postSongsResponse> => {
  const res = await fetch(getPostSongsUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(createSongRequest),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postSongsResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postSongsResponse;
};

export type postSongsSongIdPlayResponse200 = {
  data: SongDto;
  status: 200;
};

export type postSongsSongIdPlayResponse404 = {
  data: ProblemDetails;
  status: 404;
};

export type postSongsSongIdPlayResponseComposite =
  | postSongsSongIdPlayResponse200
  | postSongsSongIdPlayResponse404;

export type postSongsSongIdPlayResponse =
  postSongsSongIdPlayResponseComposite & {
    headers: Headers;
  };

export const getPostSongsSongIdPlayUrl = (songId: string) => {
  return `http://localhost:8080/api/songs/songs/${songId}/play`;
};

export const postSongsSongIdPlay = async (
  songId: string,
  options?: RequestInit,
): Promise<postSongsSongIdPlayResponse> => {
  const res = await fetch(getPostSongsSongIdPlayUrl(songId), {
    ...options,
    method: "POST",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postSongsSongIdPlayResponse["data"] = body
    ? JSON.parse(body)
    : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postSongsSongIdPlayResponse;
};
